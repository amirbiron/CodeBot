openapi: 3.0.3
info:
  title: Code Keeper WebApp API
  version: "1.0.0"
  description: |
    API לממשק ה־Web של Code Keeper (Flask + MongoDB). רוב נקודות ה־API דורשות סשן
    התחברות (cookie בשם `session`).

    הערה: חלק מהנתיבים אינם JSON‑only (למשל עמודי HTML), אך כאן מתועד חוזה ה‑API ה־JSONי.
servers:
  - url: http://localhost:5000
    description: Local development
  - url: /
    description: Relative (reverse proxy)
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session
  schemas:
    ErrorResponse:
      type: object
      properties:
        ok:
          type: boolean
          example: false
        error:
          type: string
          example: Unauthorized
    Bookmark:
      type: object
      properties:
        id:
          type: string
          nullable: true
          example: 65f1b9ac2f4a2b9f9e2d1c3a
        line_number:
          type: integer
          example: 42
        line_text_preview:
          type: string
          example: "def hello(): pass"
        note:
          type: string
        color:
          type: string
          enum: [yellow, red, green, blue, purple, orange, pink]
          example: yellow
        valid:
          type: boolean
          example: true
        sync_status:
          type: string
          enum: [synced, moved, modified, deleted]
          example: synced
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    BookmarkActionResponse:
      type: object
      properties:
        ok:
          type: boolean
        action:
          type: string
          enum: [added, removed, error]
        bookmark:
          $ref: '#/components/schemas/Bookmark'
          nullable: true
        error:
          type: string
          nullable: true
    BookmarksListResponse:
      type: object
      properties:
        ok:
          type: boolean
        bookmarks:
          type: array
          items:
            $ref: '#/components/schemas/Bookmark'
        count:
          type: integer
    FileGroup:
      type: object
      properties:
        file_id:
          type: string
        file_name:
          type: string
        file_path:
          type: string
        count:
          type: integer
        bookmarks:
          type: array
          items:
            type: object
            properties:
              line_number:
                type: integer
              note:
                type: string
              color:
                type: string
              created_at:
                type: string
                format: date-time
    UserBookmarksSummary:
      type: object
      properties:
        ok:
          type: boolean
        files:
          type: array
          items:
            $ref: '#/components/schemas/FileGroup'
        total_bookmarks:
          type: integer
        files_count:
          type: integer
    UserStats:
      type: object
      properties:
        total_bookmarks:
          type: integer
        recent_bookmarks:
          type: integer
        top_files:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
              count:
                type: integer
        max_allowed:
          type: integer
    StatsResponse:
      type: object
      properties:
        total_files:
          type: integer
        languages:
          type: array
          items:
            type: string
        recent_activity:
          type: array
          items:
            type: object
            properties:
              file_name:
                type: string
              created_at:
                type: string
                format: date-time
    PublicStatsResponse:
      type: object
      properties:
        ok:
          type: boolean
        total_users:
          type: integer
        active_users_24h:
          type: integer
        total_snippets:
          type: integer
        timestamp:
          type: string
          format: date-time
    UptimeResponse:
      type: object
      properties:
        ok:
          type: boolean
        provider:
          type: string
          nullable: true
        uptime_percentage:
          type: number
          format: float
          nullable: true
        status_url:
          type: string
          nullable: true
    ShareResponse:
      type: object
      properties:
        ok:
          type: boolean
        url:
          type: string
        share_id:
          type: string
        expires_at:
          type: string
          format: date-time
    ToggleFavoriteResponse:
      type: object
      properties:
        ok:
          type: boolean
        state:
          type: boolean
    PrefsResponse:
      type: object
      properties:
        ok:
          type: boolean
        default_color:
          type: string
        valid_colors:
          type: array
          items:
            type: string
    SetPrefsRequest:
      type: object
      properties:
        default_color:
          type: string
        color:
          type: string
    PersistentLoginRequest:
      type: object
      properties:
        enable:
          type: boolean
    PersistentLoginResponse:
      type: object
      properties:
        ok:
          type: boolean
        enabled:
          type: boolean
    UiPrefsRequest:
      type: object
      properties:
        font_scale:
          type: number
          minimum: 0.85
          maximum: 1.6
        theme:
          type: string
          enum: [classic, ocean, forest]
    UiPrefsResponse:
      type: object
      properties:
        ok:
          type: boolean
        font_scale:
          type: number
        theme:
          type: string
paths:
  /api/bookmarks/{file_id}/toggle:
    post:
      summary: Toggle bookmark for a specific line
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [line_number]
              properties:
                line_number:
                  type: integer
                line_text:
                  type: string
                note:
                  type: string
                color:
                  type: string
                  enum: [yellow, red, green, blue, purple, orange, pink]
      responses:
        '200':
          description: Toggle result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarkActionResponse'
        '400': { description: Bad Request }
        '401': { description: Unauthorized }
        '500': { description: Server Error }

  /api/bookmarks/{file_id}:
    get:
      summary: Get all bookmarks for a file
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
        - in: query
          name: include_invalid
          schema: { type: boolean, default: false }
      responses:
        '200':
          description: Bookmarks list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookmarksListResponse'
        '401': { description: Unauthorized }

  /api/bookmarks/all:
    get:
      summary: Get all bookmarks for current user (grouped)
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: limit
          schema: { type: integer, default: 100, minimum: 1, maximum: 500 }
        - in: query
          name: skip
          schema: { type: integer, default: 0, minimum: 0 }
      responses:
        '200':
          description: Grouped bookmarks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBookmarksSummary'
        '401': { description: Unauthorized }

  /api/bookmarks/{file_id}/{line_number}/note:
    put:
      summary: Update bookmark note
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
        - in: path
          name: line_number
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [note]
              properties:
                note: { type: string, maxLength: 500 }
      responses:
        '200':
          description: Update result
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  message: { type: string }
                  error: { type: string, nullable: true }
        '401': { description: Unauthorized }

  /api/bookmarks/{file_id}/{line_number}/color:
    put:
      summary: Update bookmark color
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
        - in: path
          name: line_number
          required: true
          schema: { type: integer }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [color]
              properties:
                color:
                  type: string
                  enum: [yellow, red, green, blue, purple, orange, pink]
      responses:
        '200': { description: Update result }
        '400': { description: Invalid color }
        '401': { description: Unauthorized }

  /api/bookmarks/{file_id}/{line_number}:
    delete:
      summary: Delete a specific bookmark
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
        - in: path
          name: line_number
          required: true
          schema: { type: integer }
      responses:
        '200': { description: Delete result }
        '401': { description: Unauthorized }

  /api/bookmarks/{file_id}/clear:
    delete:
      summary: Delete all bookmarks for a file
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        '200': { description: Clear result }
        '401': { description: Unauthorized }

  /api/bookmarks/{file_id}/sync:
    post:
      summary: Check if bookmarks need sync due to file changes
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [content]
              properties:
                content: { type: string }
      responses:
        '200':
          description: Sync analysis
          content:
            application/json:
              schema:
                type: object
                properties:
                  changed: { type: boolean }
                  affected:
                    type: array
                    items:
                      type: object
        '401': { description: Unauthorized }

  /api/bookmarks/stats:
    get:
      summary: Get bookmark statistics for current user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  stats: { $ref: '#/components/schemas/UserStats' }
        '401': { description: Unauthorized }

  /api/bookmarks/export:
    get:
      summary: Export user bookmarks as JSON
      security:
        - cookieAuth: []
      responses:
        '200': { description: JSON file with export }
        '401': { description: Unauthorized }

  /api/bookmarks/prefs:
    get:
      summary: Get user bookmark preferences
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Prefs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PrefsResponse'
        '401': { description: Unauthorized }
    put:
      summary: Set user bookmark default color
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetPrefsRequest'
      responses:
        '200': { description: Updated }
        '400': { description: Invalid color }
        '401': { description: Unauthorized }

  /api/share/{file_id}:
    post:
      summary: Create a public share link for a file
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Share created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShareResponse'
        '401': { description: Unauthorized }

  /api/favorite/toggle/{file_id}:
    post:
      summary: Toggle favorite flag across active versions for the file name
      security:
        - cookieAuth: []
      parameters:
        - in: path
          name: file_id
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Toggle result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ToggleFavoriteResponse'
        '401': { description: Unauthorized }

  /api/stats:
    get:
      summary: General stats for authenticated user
      security:
        - cookieAuth: []
      responses:
        '200':
          description: Stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatsResponse'
        '401': { description: Unauthorized }

  /api/persistent_login:
    post:
      summary: Enable/disable persistent login cookie
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistentLoginRequest'
      responses:
        '200':
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentLoginResponse'
        '401': { description: Unauthorized }

  /api/ui_prefs:
    post:
      summary: Save UI preferences (font scale, theme)
      security:
        - cookieAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UiPrefsRequest'
      responses:
        '200':
          description: Saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiPrefsResponse'
        '401': { description: Unauthorized }

  /api/files:
    get:
      summary: List files with filtering, search and cursor-based pagination
      security:
        - cookieAuth: []
      parameters:
        - in: query
          name: q
          schema: { type: string }
          description: Free text search
        - in: query
          name: lang
          schema: { type: string }
          description: Programming language filter
        - in: query
          name: category
          schema: { type: string }
          description: Logical category/tag
        - in: query
          name: sort
          schema:
            type: string
            enum: [created_at_desc, created_at_asc]
            default: created_at_desc
          description: Sort order
        - in: query
          name: cursor
          schema: { type: string }
          description: Cursor token for pagination (see docs)
        - in: query
          name: repo
          schema: { type: string }
          description: Optional repository/source filter
      responses:
        '200':
          description: Files page
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean, example: true }
                  items:
                    type: array
                    items:
                      type: object
                      properties:
                        id: { type: string, example: 507f1f77bcf86cd799439011 }
                        file_name: { type: string, example: example.py }
                        language: { type: string, example: python }
                        created_at: { type: string, format: date-time }
                  next_cursor: { type: string, nullable: true, example: eyJ0IjoxNjk3MzA0MDAwLCJpZCI6IjUwN2YxZjc3YmNmODZjZDc5OTQzOTAxMSJ9 }
        '401': { description: Unauthorized }

  /api/public_stats:
    get:
      summary: Public global statistics (no auth)
      responses:
        '200':
          description: Public stats
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicStatsResponse'

  /api/uptime:
    get:
      summary: External uptime summary (no secrets)
      responses:
        '200':
          description: Uptime
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UptimeResponse'
        '503':
          description: Uptime unavailable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/me:
    get:
      summary: Auth status and basic user info
      responses:
        '200':
          description: Auth status
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok: { type: boolean }
                  authenticated: { type: boolean }
                  user:
                    type: object
                    nullable: true
                    properties:
                      user_id: { type: integer }
                      username: { type: string, nullable: true }
                      first_name: { type: string, nullable: true }
                      last_name: { type: string, nullable: true }
                  ui_prefs:
                    type: object
                    properties:
                      font_scale: { type: number, nullable: true }
                      theme: { type: string, nullable: true }

  /health:
    get:
      summary: Health check
      responses:
        '200':
          description: Health info
          content:
            application/json:
              schema:
                type: object
                properties:
                  status: { type: string }
                  message: { type: string }
                  version: { type: string }
                  database: { type: string }
                  config: { type: object }
                  timestamp: { type: string, format: date-time }
