name: Notify Telegram

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    types:
      - completed

jobs:
  notify:
    name: Send Telegram Notification
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.event == 'pull_request'
    steps:
      - name: Compute metadata
        id: meta
        run: |
          started_at="${{ github.event.workflow_run.run_started_at }}"
          completed_at="${{ github.event.workflow_run.updated_at }}"
          start_ts=$(date -d "$started_at" +%s)
          end_ts=$(date -d "$completed_at" +%s)
          duration_sec=$(( end_ts - start_ts ))
          mins=$(( duration_sec / 60 ))
          secs=$(( duration_sec % 60 ))
          printf 'duration=%sm %ss\n' "$mins" "$secs" >> "$GITHUB_OUTPUT"

          # Format local time (UTC by default); adjust if needed
          ts_fmt=$(date -d "$completed_at" '+%d/%m/%Y %H:%M')
          echo "finished_at=${ts_fmt}" >> "$GITHUB_OUTPUT"

          # Derive PR info if available
          pr_number="${{ github.event.workflow_run.pull_requests[0].number }}"
          pr_title="${{ github.event.workflow_run.pull_requests[0].title }}"
          repo="${{ github.repository }}"
          pr_url="https://github.com/${repo}/pull/${pr_number}"
          echo "pr_number=${pr_number}" >> "$GITHUB_OUTPUT"
          echo "pr_title=${pr_title}" >> "$GITHUB_OUTPUT"
          echo "pr_url=${pr_url}" >> "$GITHUB_OUTPUT"

          # Workflow details
          echo "workflow_name=${{ github.event.workflow_run.name }}" >> "$GITHUB_OUTPUT"
          echo "conclusion=${{ github.event.workflow_run.conclusion }}" >> "$GITHUB_OUTPUT"

      - name: Build message
        id: msg
        run: |
          status_emoji='✅'
          case "${{ steps.meta.outputs.conclusion }}" in
            success) status_emoji='✅' ;;
            cancelled) status_emoji='⏹️' ;;
            failure) status_emoji='❌' ;;
            * ) status_emoji='ℹ️' ;;
          esac

          # Escape characters for Telegram markdown
          esc() { printf '%s' "$1" | sed -e 's/[_*`\[]/\\&/g'; }

          title="GitHub Actions – הסתיים ${status_emoji}"
          time_line="⏰ ${{ steps.meta.outputs.finished_at }}"

          pr_line="🔄 PR #${{ steps.meta.outputs.pr_number }}: $(esc "${{ steps.meta.outputs.pr_title }}")"
          wf_line="⚙️ Workflow: $(esc "${{ steps.meta.outputs.workflow_name }}")"
          dur_line="⏱️ זמן ריצה: ${{ steps.meta.outputs.duration }}"
          link_line="\n🔗 [צפה ב-PR](${{ steps.meta.outputs.pr_url }})"

          message="${title}\n${time_line}\n\n${pr_line}\n${wf_line}\n${dur_line}${link_line}"
          echo "text=${message}" >> "$GITHUB_OUTPUT"

      - name: Send Telegram message
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          if [ -z "${BOT_TOKEN:-}" ] || [ -z "${CHAT_ID:-}" ]; then
            echo "BOT_TOKEN or CHAT_ID is missing" >&2
            exit 1
          fi
          api_url="https://api.telegram.org/bot${BOT_TOKEN}/sendMessage"
          # Use MarkdownV2 for safe formatting
          jq -nc --arg chat_id "$CHAT_ID" --arg text "${{ steps.msg.outputs.text }}" '{chat_id:$chat_id, text:$text, parse_mode:"MarkdownV2", disable_web_page_preview:true}' \
            | curl -sS -X POST "$api_url" -H 'Content-Type: application/json' -d @- | cat

