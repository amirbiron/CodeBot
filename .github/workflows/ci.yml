name: CI

on:
  pull_request:
    branches: [ '**' ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  code-quality:
    name: "🔍 Code Quality & Security"
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
      - name: 📦 Install Linters & Tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety ruff
      - name: 📋 Lint (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: 🎨 Format Check (Black)
        run: black --check --diff . || true
      - name: 🔡 Import Sort Check (isort)
        run: isort --check-only --diff . || true
      - name: 🏷️ Type Check (MyPy)
        run: |
          mypy . --ignore-missing-imports --show-error-codes | tee mypy-output.txt || true
          if grep -E '\[(attr-defined|return-value)\]' mypy-output.txt; then
            echo "Found mypy attr-defined/return-value errors above"
            exit 1
          fi
      - name: 🔒 Security Scan (Bandit)
        run: bandit -q -r . || true
      - name: 🛡️ Dependency Check (Safety)
        run: safety check --full-report || true
      - name: 🐶 Ruff (optional)
        run: ruff check . || true

  unit-tests:
    name: "🧪 Unit Tests (${{ matrix.python-version }})"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ '3.11', '3.12' ]
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install wheel poetry-core
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock
      - name: 🔎 Dependency integrity (pip check)
        run: pip check || true
      - name: 🧪 Smoke compile (exclude .restore)
        run: |
          find . -type f -name "*.py" -not -path "./.restore/*" -print0 | xargs -0 -n1 -P 4 python -m py_compile
      - name: 🧪 Run Tests
        env:
          BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:TEST_TOKEN_FOR_TESTING' }}
          MONGODB_URL: mongodb://test:test123@localhost:27017/test_db?authSource=admin
          REDIS_URL: redis://localhost:6379/0
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          PASTEBIN_API_KEY: ${{ secrets.TEST_PASTEBIN_KEY }}
        run: pytest -v -o addopts="" --cov=. --cov-report=xml --cov-report=term

  hadolint:
    name: "Dockerfile lint (hadolint)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: error

  gitleaks:
    name: "Secrets scan (gitleaks)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Run gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          args: detect --no-banner --redact --source .
        continue-on-error: true

  semgrep:
    name: "SAST (Semgrep)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Semgrep scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: true
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  yamllint:
    name: "YAML lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .
          config_file: .yamllint.yaml
        continue-on-error: true

  lychee:
    name: "Link checker (lychee)"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check links
        uses: lycheeverse/lychee-action@v1
        with:
          args: --no-progress README.md docs/
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

  alembic-migrations:
    name: "Alembic migrations check"

    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: app
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - uses: actions/checkout@v4
      - name: Check if alembic.ini exists
        id: has_alembic
        run: |
          if [ -f alembic.ini ]; then
            echo "exists=true" >> "$GITHUB_OUTPUT"
          else
            echo "exists=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Skip if missing
        if: steps.has_alembic.outputs.exists == 'false'
        run: echo "alembic.ini not found; skipping migration check."
      - uses: actions/setup-python@v5
        if: steps.has_alembic.outputs.exists == 'true'
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        if: steps.has_alembic.outputs.exists == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install alembic psycopg2-binary
      - name: Wait for DB
        if: steps.has_alembic.outputs.exists == 'true'
        run: |
          for i in {1..30}; do
            if pg_isready -h localhost -p 5432 -U postgres; then
              break
            fi
            sleep 2
          done
      - name: Run Alembic migrations
        if: steps.has_alembic.outputs.exists == 'true'
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/app
        run: |
          alembic upgrade head

