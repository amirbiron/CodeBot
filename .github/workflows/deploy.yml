# ===================================
# Code Keeper Bot - CI/CD Pipeline
# בוט שומר קבצי קוד - פייפליין אוטומטי
# ===================================

name: 🚀 Code Keeper Bot CI/CD

on:
  # הפעלה על push לענפים עיקריים
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  
  # הפעלה על Pull Requests
  pull_request:
    branches: [ main, develop ]
  
  # הפעלה ידנית
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# משתני סביבה גלובליים
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# הרשאות GITHUB_TOKEN
permissions:
  contents: read
  packages: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  # ===================================
  # שלב 1: בדיקות קוד
  # ===================================
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit safety pytest pytest-asyncio pytest-cov
      
      - name: 🎨 Code Formatting (Black)
        run: |
          black --check --diff .
        continue-on-error: true
      
      - name: 📋 Import Sorting (isort)
        run: |
          isort --check-only --diff .
        continue-on-error: true
      
      - name: 🔍 Linting (Flake8)
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: 🏷️ Type Checking (MyPy)
        run: |
          mypy . --ignore-missing-imports
        continue-on-error: true
      
      - name: 🔒 Security Check (Bandit)
        run: |
          bandit -r . -f json -o bandit-report.json
        continue-on-error: true
      
      - name: 🛡️ Dependency Check (Safety)
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: 📊 Upload Security Reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # ===================================
  # שלב 2: בדיקות יחידה
  # ===================================
  unit-tests:
    name: 🧪 Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "echo 'db.runCommand(\"ping\").ok' | mongosh localhost:27017/test --quiet"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov pytest-mock
      
      - name: 🧪 Run Tests
        env:
          BOT_TOKEN: ${{ secrets.TEST_BOT_TOKEN || '1234567890:TEST_TOKEN_FOR_TESTING' }}
          MONGODB_URL: mongodb://test:test123@localhost:27017/test_db?authSource=admin
          REDIS_URL: redis://localhost:6379/0
          GITHUB_TOKEN: ${{ secrets.TEST_GITHUB_TOKEN }}
          PASTEBIN_API_KEY: ${{ secrets.TEST_PASTEBIN_KEY }}
        run: |
          pytest -v --cov=. --cov-report=xml --cov-report=html
      
      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        if: matrix.python-version == '3.11'
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
      
      - name: 📈 Upload Coverage Reports
        uses: actions/upload-artifact@v3
        if: matrix.python-version == '3.11'
        with:
          name: coverage-reports
          path: htmlcov/

  # ===================================
  # שלב 3: בניית Docker Images
  # ===================================
  build-docker:
    name: 🐳 Build Docker Images
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: 🏗️ Build and Push Docker Image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production
      
      - name: 🛡️ Run Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: 📊 Upload Security Scan Results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===================================
  # שלב 4: פריסה ל-Staging
  # ===================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    
    environment:
      name: staging
      url: https://staging.codekeeper.bot
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🚀 Deploy to Staging Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USER }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          script: |
            cd /opt/code-keeper-bot
            git pull origin develop
            
            # עדכון משתני סביבה
            cp .env.staging .env
            
            # עדכון Docker images
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # בדיקת תקינות
            sleep 30
            docker-compose exec -T code-keeper-bot python -c "
            from config import config
            from database import db
            print('✅ Staging deployment successful')
            "
      
      - name: 🧪 Run Integration Tests
        run: |
          # כאן נוסיף בדיקות אינטגרציה
          echo "🧪 Running integration tests against staging..."
          # curl -f http://staging.codekeeper.bot/health || exit 1

  # ===================================
  # שלב 5: פריסה לייצור
  # ===================================
  deploy-production:
    name: 🏭 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-docker, deploy-staging]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    
    environment:
      name: production
      url: https://codekeeper.bot
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🎯 Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## 🚀 Code Keeper Bot ${{ github.ref_name }}
            
            ### ✨ New Features
            - Feature 1
            - Feature 2
            
            ### 🐛 Bug Fixes
            - Fix 1
            - Fix 2
            
            ### 📦 Docker Image
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
            ```
            
            ### 🔗 Full Changelog
            https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.ref_name }}
          draft: false
          prerelease: false
      
      - name: 🚀 Deploy to Production Servers
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          script: |
            cd /opt/code-keeper-bot
            
            # גיבוי לפני עדכון
            docker-compose exec -T mongodb mongodump --authenticationDatabase admin -u $MONGO_USERNAME -p $MONGO_PASSWORD --out /backup/pre-deploy-$(date +%Y%m%d-%H%M%S)
            
            # עדכון קוד
            git fetch --all
            git checkout main
            git pull origin main
            
            # עדכון משתני סביבה
            cp .env.production .env
            
            # עדכון Docker images
            docker-compose pull
            docker-compose up -d --remove-orphans
            
            # בדיקת תקינות
            sleep 60
            docker-compose exec -T code-keeper-bot python -c "
            from config import config
            from database import db
            print('✅ Production deployment successful')
            "
            
            # ניקוי images ישנים
            docker image prune -f
      
      - name: 📊 Health Check
        run: |
          echo "🏥 Running production health checks..."
          # כאן נוסיף בדיקות תקינות מפורטות
          # curl -f https://codekeeper.bot/health || exit 1

  # ===================================
  # שלב 6: התראות
  # ===================================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: 📱 Telegram Notification
        if: always()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            🤖 **Code Keeper Bot Deployment**
            
            📋 **Workflow:** ${{ github.workflow }}
            🌿 **Branch:** ${{ github.ref_name }}
            👤 **Actor:** ${{ github.actor }}
            💾 **Commit:** ${{ github.sha }}
            
            📊 **Results:**
            • Code Quality: ${{ needs.code-quality.result }}
            • Unit Tests: ${{ needs.unit-tests.result }}
            • Docker Build: ${{ needs.build-docker.result }}
            • Staging: ${{ needs.deploy-staging.result }}
            • Production: ${{ needs.deploy-production.result }}
            
            🔗 **Details:** https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
      
      - name: 📧 Email Notification
        if: failure()
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USER }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "❌ Code Keeper Bot Deployment Failed"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "CI/CD <noreply@codekeeper.bot>"
          html_body: |
            <h2>❌ Deployment Failed</h2>
            <p><strong>Repository:</strong> ${{ github.repository }}</p>
            <p><strong>Branch:</strong> ${{ github.ref_name }}</p>
            <p><strong>Commit:</strong> ${{ github.sha }}</p>
            <p><strong>Actor:</strong> ${{ github.actor }}</p>
            <p><a href="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}">View Details</a></p>

  # ===================================
  # שלב 7: ניקוי
  # ===================================
  cleanup:
    name: 🧹 Cleanup
    runs-on: ubuntu-latest
    needs: [notify]
    if: always()
    
    steps:
      - name: 🗑️ Delete Old Images
        uses: actions/delete-package-versions@v4
        with:
          package-name: ${{ env.IMAGE_NAME }}
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
      
      - name: 📊 Collect Metrics
        run: |
          echo "📊 Collecting deployment metrics..."
          # כאן נוסיף איסוף מטריקות לצורכי ניטור

# ===================================
# Workflow נוסף: Security Scanning
# ===================================
---
name: 🔒 Security Scan

on:
  schedule:
    - cron: '0 2 * * 1'  # כל יום שני ב-2:00
  workflow_dispatch:

jobs:
  security-scan:
    name: 🛡️ Security Analysis
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: python
      
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v2
      
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

# ===================================
# Workflow נוסף: Performance Testing
# ===================================
---
name: ⚡ Performance Tests

on:
  schedule:
    - cron: '0 4 * * *'  # יומי ב-4:00
  workflow_dispatch:

jobs:
  performance-test:
    name: 🚀 Load Testing
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: 🔥 Run Load Tests
        run: |
          echo "🔥 Running performance tests..."
          # כאן נוסיף בדיקות ביצועים
          # k6 run performance/load-test.js

# ===================================
# הוראות שימוש
# ===================================

# Secrets נדרשים ב-GitHub:
# - TEST_BOT_TOKEN: טוקן בוט לבדיקות
# - TEST_GITHUB_TOKEN: טוקן GitHub לבדיקות
# - TEST_PASTEBIN_KEY: מפתח Pastebin לבדיקות
# - STAGING_HOST: כתובת שרת staging
# - STAGING_USER: משתמש SSH לstaging
# - STAGING_SSH_KEY: מפתח SSH לstaging
# - PRODUCTION_HOST: כתובת שרת ייצור
# - PRODUCTION_USER: משתמש SSH לייצור
# - PRODUCTION_SSH_KEY: מפתח SSH לייצור
# - TELEGRAM_CHAT_ID: ID צ'אט להתראות
# - TELEGRAM_BOT_TOKEN: טוקן בוט להתראות
# - NOTIFICATION_EMAIL: אימייל להתראות
# - SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASSWORD: הגדרות SMTP

# Environment Variables ב-GitHub Environments:
# staging:
#   - MONGODB_URL
#   - REDIS_URL
#   - BOT_TOKEN
# production:
#   - MONGODB_URL
#   - REDIS_URL
#   - BOT_TOKEN
#   - GITHUB_TOKEN
#   - PASTEBIN_API_KEY
